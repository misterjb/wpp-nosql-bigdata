WP NoSQL und BigData
Aufgabenblatt 3
Team: Igor Arkhipov und Jannik Bruhns

7.
a) Import:
public static void importJson() throws IOException, JSONException {
        FileReader freader = new FileReader("./res/plz.data");
        BufferedReader breader = new BufferedReader(freader);
        String dataline = breader.readLine();

        while (dataline != null )
        {
            Document data = new Document();
            JSONObject jsonObject = new JSONObject(dataline);
            for (String key : jsonObject.keySet()) {
                String val =  String.valueOf(jsonObject.get(key));
                if (key.equals("_id")) {
                    key = "id";
                }
                data.append(key, val);
            }
            collection.insertOne(data);
            dataline = breader.readLine();
        }
        breader.close();
}

b) PLZ -> Stadt
public static String getValue(String key) throws JSONException {
        FindIterable<Document> iterator = collection.find(new Document("id", key));
        String answer = "";
        for (Document doc : iterator) {
            answer += "Ort: " + doc.get("city");
            answer += ", Bundesstaat: " + doc.get("state") + "\n";
        }
        if (answer != "") {
            return answer;
        }
        return "Keine zutreffende Eingabe!";
}

c) Stadt -> PLZ
public static String findKey(String city) throws JSONException {
        FindIterable<Document> iterator = collection.find(new Document("city", city));
        List<String> answer = new ArrayList<>();
        for (Document doc : iterator) {
            answer.add(String.valueOf(doc.get("id")));
        }

        if (answer.isEmpty()) {
            return "Keine zutreffende Eingabe!";
        }
        return answer.toString();
}

d) Vergleich:

LoC: 182 Redis vs 187 Mongo
Arbeitszeit: je Implementierung 2 Stunden 
Ausfuehrungszeit: 3449ms Redis vs 85ms Mongo

Key->Value Abfragen sind gleich effektiv. 
Value->Key Abfragen sind im Redis Fall deutlich erhoeht (alle keys muessen durchlaufen werden)

8.
a) Import
mongo shell oefnnen und dann alle Befehle ausfuehren.

Was korrigiert wurde: 
jede 'new Date (1887, 09, 29)' wurde zu {year: 1887, month: 9, day: 29} 
'Frankfurt': weiss' wurde zu 'weiss'
'Leverkusen': noch "hour" und "minute" hinzugefuegt

b)
Vereine mit den jeweils folgenden Eigenschaften anzeigen:
1. mit Namen 'Augsburg'
db.fussball.find({name: "Augsburg"}) : 1 Dokument 
2. alle Nike-Vereine, welche schwarz als mindestens eine Vereinsfarbe haben
db.fussball.find({nike: "j", farben: { $in: ["schwarz"] }}) : 1 Dokument (Frankfurt) 
3. alle Nike-Vereine, welche weiss und gruen als Vereinsfarbe haben
db.fussball.find({nike: "j", $and:  [ { farben: { $in: ["weiss"] }}, { farben: { $in: ["gruen"] }} ]}) : 1 Dokument (Werder)
4. alle Nike-Vereine, welche weiss oder gr√ºn als Vereinsfarbe haben
db.fussball.find({nike: "j",farben: { $in: ["weiss", "gruen"] }}) : 4 Dokumente (Hertha, Augsburg, Frankfurt, Werder)
5. den Verein mit dem hoechsten Tabellenplatz
db.fussball.find().sort({Tabellenplatz: 1}).limit(1) : 1 Dokument (Werder) 
// Tabellenplatz: 1 = aufsteigende Sortierung
6. alle Vereine, die nicht auf einem Abstiegsplatz stehen
db.fussball.find( { Tabellenplatz: { $lt: 17 }}) : 11 Dokumente 

c)
eigene Abfrage: 
"Wie lautet der durchschnittliche Platz aller Vereine mit/ohne Nike als Sponsor?"
db.fussball.aggregate( { $group: { _id: "$nike", avgPlace: { $avg: "$Tabellenplatz" }}})
{ "_id" : "j", "avgPlace" : 10 }
{ "_id" : "n", "avgPlace" : 12.25 }

d)
Ausgefuehrt: 
db.fussball.update({name: "Augsburg"}, {Tabellenplatz: 1})
Ergebnis: urspruenglicher Eintrag wurde durch neuen Datensatz ersetzt

e)
1. Aendern sie den Tabellenplatz von Leverkusen auf 2
db.fussball.update({name: "Leverkusen"}, {$set: {Tabellenplatz: 2}})
2. Werder soll um einen Tabellenplatz nach vorne gebracht werden
db.fussball.update({name: "Werder"}, {$inc: {Tabellenplatz:-1}})
3. Ergaenzen sie fuer den HSV ein Attribut "abgestiegen" mit einem sinnvollen Wert
db.fussball.update({name: "HSV"}, {$set: {"abgestiegen": "ja"}})
4. Ergaenzen sie fuer alle Vereine, deren Vereinsfarbe weiss enthaelt, ein Attribut "Waschtemperatur" mit dem Wert 90
db.fussball.updateMany({farben:{$in:["weiss"]}}, {$set:{ "Waschmaschine": 90}}, false, true)
// upsert = false, multi = true

9. (Wide-Column Datenbank) 
HBase-Datenbank installiert (mit Hadoop)
