WP NoSQL und BigData
Aufgabenblatt 2
Team: Igor Arkhipov und Jannik Bruhns

4. 
a)
Datenbankstruktur:
Beispiel aus plz.dat:
{ "_id" : "01001", "city" : "AGAWAM", "loc" : [ -72.622739, 42.070206 ], "pop" : 15338, "state" : "MA" }

=>
Key (Postleitzahl als String): "01001"
Value (JSON): {"city" : "AGAWAM", "loc" : [ -72.622739, 42.070206 ], "pop" : 15338, "state" : "MA"}

Import:

package com.nosql;

import org.json.JSONObject;
import redis.clients.jedis.Jedis;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Set;

public class Redis {
    private static Jedis jedis;

    public static void main(String[] args) throws IOException {
        jedis = new Jedis("localhost", 6379);
        System.out.println(jedis.ping());

        importJson();
    }

    public static void importJson() throws IOException {
        FileReader freader = new FileReader("./res/plz.data");
        BufferedReader breader = new BufferedReader(freader);
        String dataline = breader.readLine();

        while (dataline != null) {
            JSONObject jsonObject = new JSONObject(dataline);
            String key = (String) jsonObject.get("_id");
            jsonObject.remove(key);
            String value = jsonObject.toString();
            jedis.set(key, value);
            dataline = breader.readLine();
        }
        breader.close();
    }
}


b)
public class Redis {
    private static Jedis jedis;

    public static void main(String[] args) throws IOException {
        jedis = new Jedis("localhost", 6379);
        System.out.println(jedis.ping());

        System.out.println(getValue("01001"));
    }

    public static String getValue(String key) {
        String value = jedis.get(key);
        if (value != "") {
            JSONObject jsonObject = new JSONObject(value);
            String city = jsonObject.get("city").toString();
            String state = jsonObject.get("state").toString();

            return "City > " + city + " and State > " + state;
        }
        return "Keine zutreffende Eingabe!";
    }
}

c)
public class Redis {
    private static Jedis jedis;

    public static void main(String[] args) throws IOException {
        jedis = new Jedis("localhost", 6379);
        System.out.println(jedis.ping());

        System.out.println(findKey("TUMTUM")); //4c
        System.out.println(findKey("HAMBURG")); //4c
    }

    public static String findKey(String city) {
        Set<String> keys = jedis.keys("*");
        List<String> answer = new ArrayList<String>();

        for (String key : keys) {
            String value = jedis.get(key);
            JSONObject jsonObject = new JSONObject(value);
            if (city.equals(jsonObject.get("city").toString())) {
                answer.add(key);
            }
        }

        Collections.sort(answer);

        if (answer.isEmpty()) {
            return "Keine zutreffende Eingabe!";
        }
        return answer.toString();
    }
}

Ergebnisse:

City > AGAWAM and State > MA
[99034]
[07419, 14075, 19526, 51640, 54411, 55339, 62045, 71339, 71646]

5.
a)
Die DB wurde manuell angelegt (ueber Browser)

b)
    1. MATCH ((n:class {name:"wp-nosql"})-[:uses]->(x)) RETURN x.name
    2. MATCH (n:class) WHERE NOT (n)-[:uses]->(:class) RETURN n.name

6.
a)
Die DB wurde gespeichert und alte (lokale) überschrieben.

b)
„ConceptNet is a semantic network based on the information in the OMCS database. 
ConceptNet is expressed as a directed graph whose nodes are concepts, and whose edges 
are assertions of common sense about these concepts. Concepts represent sets of closely 
related natural language phrases, which could be noun phrases, verb phrases, adjective 
phrases, or clauses.“
